// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/chrusty/go-grpc-service/internal/storage"
	svc_example "github.com/chrusty/go-grpc-service/pkg/api/v1/go"
)

type FakeStorer struct {
	CreateCruftStub        func(*svc_example.Cruft) (string, error)
	createCruftMutex       sync.RWMutex
	createCruftArgsForCall []struct {
		arg1 *svc_example.Cruft
	}
	createCruftReturns struct {
		result1 string
		result2 error
	}
	createCruftReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ReadCruftStub        func(string) (*svc_example.Cruft, error)
	readCruftMutex       sync.RWMutex
	readCruftArgsForCall []struct {
		arg1 string
	}
	readCruftReturns struct {
		result1 *svc_example.Cruft
		result2 error
	}
	readCruftReturnsOnCall map[int]struct {
		result1 *svc_example.Cruft
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStorer) CreateCruft(arg1 *svc_example.Cruft) (string, error) {
	fake.createCruftMutex.Lock()
	ret, specificReturn := fake.createCruftReturnsOnCall[len(fake.createCruftArgsForCall)]
	fake.createCruftArgsForCall = append(fake.createCruftArgsForCall, struct {
		arg1 *svc_example.Cruft
	}{arg1})
	fake.recordInvocation("CreateCruft", []interface{}{arg1})
	fake.createCruftMutex.Unlock()
	if fake.CreateCruftStub != nil {
		return fake.CreateCruftStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.createCruftReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorer) CreateCruftCallCount() int {
	fake.createCruftMutex.RLock()
	defer fake.createCruftMutex.RUnlock()
	return len(fake.createCruftArgsForCall)
}

func (fake *FakeStorer) CreateCruftCalls(stub func(*svc_example.Cruft) (string, error)) {
	fake.createCruftMutex.Lock()
	defer fake.createCruftMutex.Unlock()
	fake.CreateCruftStub = stub
}

func (fake *FakeStorer) CreateCruftArgsForCall(i int) *svc_example.Cruft {
	fake.createCruftMutex.RLock()
	defer fake.createCruftMutex.RUnlock()
	argsForCall := fake.createCruftArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorer) CreateCruftReturns(result1 string, result2 error) {
	fake.createCruftMutex.Lock()
	defer fake.createCruftMutex.Unlock()
	fake.CreateCruftStub = nil
	fake.createCruftReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStorer) CreateCruftReturnsOnCall(i int, result1 string, result2 error) {
	fake.createCruftMutex.Lock()
	defer fake.createCruftMutex.Unlock()
	fake.CreateCruftStub = nil
	if fake.createCruftReturnsOnCall == nil {
		fake.createCruftReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createCruftReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeStorer) ReadCruft(arg1 string) (*svc_example.Cruft, error) {
	fake.readCruftMutex.Lock()
	ret, specificReturn := fake.readCruftReturnsOnCall[len(fake.readCruftArgsForCall)]
	fake.readCruftArgsForCall = append(fake.readCruftArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ReadCruft", []interface{}{arg1})
	fake.readCruftMutex.Unlock()
	if fake.ReadCruftStub != nil {
		return fake.ReadCruftStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.readCruftReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStorer) ReadCruftCallCount() int {
	fake.readCruftMutex.RLock()
	defer fake.readCruftMutex.RUnlock()
	return len(fake.readCruftArgsForCall)
}

func (fake *FakeStorer) ReadCruftCalls(stub func(string) (*svc_example.Cruft, error)) {
	fake.readCruftMutex.Lock()
	defer fake.readCruftMutex.Unlock()
	fake.ReadCruftStub = stub
}

func (fake *FakeStorer) ReadCruftArgsForCall(i int) string {
	fake.readCruftMutex.RLock()
	defer fake.readCruftMutex.RUnlock()
	argsForCall := fake.readCruftArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeStorer) ReadCruftReturns(result1 *svc_example.Cruft, result2 error) {
	fake.readCruftMutex.Lock()
	defer fake.readCruftMutex.Unlock()
	fake.ReadCruftStub = nil
	fake.readCruftReturns = struct {
		result1 *svc_example.Cruft
		result2 error
	}{result1, result2}
}

func (fake *FakeStorer) ReadCruftReturnsOnCall(i int, result1 *svc_example.Cruft, result2 error) {
	fake.readCruftMutex.Lock()
	defer fake.readCruftMutex.Unlock()
	fake.ReadCruftStub = nil
	if fake.readCruftReturnsOnCall == nil {
		fake.readCruftReturnsOnCall = make(map[int]struct {
			result1 *svc_example.Cruft
			result2 error
		})
	}
	fake.readCruftReturnsOnCall[i] = struct {
		result1 *svc_example.Cruft
		result2 error
	}{result1, result2}
}

func (fake *FakeStorer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createCruftMutex.RLock()
	defer fake.createCruftMutex.RUnlock()
	fake.readCruftMutex.RLock()
	defer fake.readCruftMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStorer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ storage.Storer = new(FakeStorer)
