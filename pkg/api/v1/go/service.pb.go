// Code generated by protoc-gen-go. DO NOT EDIT.
// source: service.proto

package svc_example

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// I use these to respond with application-specific error scenarios (instead of returning a GRPC error).
// This allows our middleware to trust that a GRPC error is either a dead server or a protocol failure (and is therefore safe to retry).
// I'm still not sure that this is the right way, but I don't like using GRPC codes either.
type StatusCode int32

const (
	StatusCode_UNSPECIFIED          StatusCode = 0
	StatusCode_OK                   StatusCode = 1000
	StatusCode_BAD_REQUEST_PAYLOAD  StatusCode = 1001
	StatusCode_CRUFT_ALREADY_EXISTS StatusCode = 1002
	StatusCode_CRUFT_NOT_FOUND      StatusCode = 1003
)

var StatusCode_name = map[int32]string{
	0:    "UNSPECIFIED",
	1000: "OK",
	1001: "BAD_REQUEST_PAYLOAD",
	1002: "CRUFT_ALREADY_EXISTS",
	1003: "CRUFT_NOT_FOUND",
}

var StatusCode_value = map[string]int32{
	"UNSPECIFIED":          0,
	"OK":                   1000,
	"BAD_REQUEST_PAYLOAD":  1001,
	"CRUFT_ALREADY_EXISTS": 1002,
	"CRUFT_NOT_FOUND":      1003,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

type CreateCruftRequest struct {
	Cruft                *Cruft   `protobuf:"bytes,1,opt,name=cruft,proto3" json:"cruft,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateCruftRequest) Reset()         { *m = CreateCruftRequest{} }
func (m *CreateCruftRequest) String() string { return proto.CompactTextString(m) }
func (*CreateCruftRequest) ProtoMessage()    {}
func (*CreateCruftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{0}
}

func (m *CreateCruftRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCruftRequest.Unmarshal(m, b)
}
func (m *CreateCruftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCruftRequest.Marshal(b, m, deterministic)
}
func (m *CreateCruftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCruftRequest.Merge(m, src)
}
func (m *CreateCruftRequest) XXX_Size() int {
	return xxx_messageInfo_CreateCruftRequest.Size(m)
}
func (m *CreateCruftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCruftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCruftRequest proto.InternalMessageInfo

func (m *CreateCruftRequest) GetCruft() *Cruft {
	if m != nil {
		return m.Cruft
	}
	return nil
}

type CreateCruftResponse struct {
	StatusCode           StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=svc.example.StatusCode" json:"status_code,omitempty"`
	CruftId              string     `protobuf:"bytes,2,opt,name=cruft_id,json=cruftId,proto3" json:"cruft_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *CreateCruftResponse) Reset()         { *m = CreateCruftResponse{} }
func (m *CreateCruftResponse) String() string { return proto.CompactTextString(m) }
func (*CreateCruftResponse) ProtoMessage()    {}
func (*CreateCruftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{1}
}

func (m *CreateCruftResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateCruftResponse.Unmarshal(m, b)
}
func (m *CreateCruftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateCruftResponse.Marshal(b, m, deterministic)
}
func (m *CreateCruftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateCruftResponse.Merge(m, src)
}
func (m *CreateCruftResponse) XXX_Size() int {
	return xxx_messageInfo_CreateCruftResponse.Size(m)
}
func (m *CreateCruftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateCruftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateCruftResponse proto.InternalMessageInfo

func (m *CreateCruftResponse) GetStatusCode() StatusCode {
	if m != nil {
		return m.StatusCode
	}
	return StatusCode_UNSPECIFIED
}

func (m *CreateCruftResponse) GetCruftId() string {
	if m != nil {
		return m.CruftId
	}
	return ""
}

type ReadCruftRequest struct {
	CruftId              string   `protobuf:"bytes,1,opt,name=cruft_id,json=cruftId,proto3" json:"cruft_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReadCruftRequest) Reset()         { *m = ReadCruftRequest{} }
func (m *ReadCruftRequest) String() string { return proto.CompactTextString(m) }
func (*ReadCruftRequest) ProtoMessage()    {}
func (*ReadCruftRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{2}
}

func (m *ReadCruftRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadCruftRequest.Unmarshal(m, b)
}
func (m *ReadCruftRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadCruftRequest.Marshal(b, m, deterministic)
}
func (m *ReadCruftRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadCruftRequest.Merge(m, src)
}
func (m *ReadCruftRequest) XXX_Size() int {
	return xxx_messageInfo_ReadCruftRequest.Size(m)
}
func (m *ReadCruftRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadCruftRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ReadCruftRequest proto.InternalMessageInfo

func (m *ReadCruftRequest) GetCruftId() string {
	if m != nil {
		return m.CruftId
	}
	return ""
}

type ReadCruftResponse struct {
	StatusCode           StatusCode `protobuf:"varint,1,opt,name=status_code,json=statusCode,proto3,enum=svc.example.StatusCode" json:"status_code,omitempty"`
	Cruft                *Cruft     `protobuf:"bytes,2,opt,name=cruft,proto3" json:"cruft,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *ReadCruftResponse) Reset()         { *m = ReadCruftResponse{} }
func (m *ReadCruftResponse) String() string { return proto.CompactTextString(m) }
func (*ReadCruftResponse) ProtoMessage()    {}
func (*ReadCruftResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{3}
}

func (m *ReadCruftResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReadCruftResponse.Unmarshal(m, b)
}
func (m *ReadCruftResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReadCruftResponse.Marshal(b, m, deterministic)
}
func (m *ReadCruftResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReadCruftResponse.Merge(m, src)
}
func (m *ReadCruftResponse) XXX_Size() int {
	return xxx_messageInfo_ReadCruftResponse.Size(m)
}
func (m *ReadCruftResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ReadCruftResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ReadCruftResponse proto.InternalMessageInfo

func (m *ReadCruftResponse) GetStatusCode() StatusCode {
	if m != nil {
		return m.StatusCode
	}
	return StatusCode_UNSPECIFIED
}

func (m *ReadCruftResponse) GetCruft() *Cruft {
	if m != nil {
		return m.Cruft
	}
	return nil
}

// Usually I would have "models" like this in a separate repo
type Cruft struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IsCrufty             bool     `protobuf:"varint,3,opt,name=is_crufty,json=isCrufty,proto3" json:"is_crufty,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Cruft) Reset()         { *m = Cruft{} }
func (m *Cruft) String() string { return proto.CompactTextString(m) }
func (*Cruft) ProtoMessage()    {}
func (*Cruft) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0b84a42fa06f626, []int{4}
}

func (m *Cruft) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Cruft.Unmarshal(m, b)
}
func (m *Cruft) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Cruft.Marshal(b, m, deterministic)
}
func (m *Cruft) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cruft.Merge(m, src)
}
func (m *Cruft) XXX_Size() int {
	return xxx_messageInfo_Cruft.Size(m)
}
func (m *Cruft) XXX_DiscardUnknown() {
	xxx_messageInfo_Cruft.DiscardUnknown(m)
}

var xxx_messageInfo_Cruft proto.InternalMessageInfo

func (m *Cruft) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Cruft) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Cruft) GetIsCrufty() bool {
	if m != nil {
		return m.IsCrufty
	}
	return false
}

func init() {
	proto.RegisterEnum("svc.example.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*CreateCruftRequest)(nil), "svc.example.CreateCruftRequest")
	proto.RegisterType((*CreateCruftResponse)(nil), "svc.example.CreateCruftResponse")
	proto.RegisterType((*ReadCruftRequest)(nil), "svc.example.ReadCruftRequest")
	proto.RegisterType((*ReadCruftResponse)(nil), "svc.example.ReadCruftResponse")
	proto.RegisterType((*Cruft)(nil), "svc.example.Cruft")
}

func init() { proto.RegisterFile("service.proto", fileDescriptor_a0b84a42fa06f626) }

var fileDescriptor_a0b84a42fa06f626 = []byte{
	// 386 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4d, 0xef, 0x93, 0x40,
	0x10, 0xc6, 0x05, 0xad, 0xb4, 0x43, 0xfc, 0x17, 0xa7, 0x4d, 0xa4, 0x35, 0x2a, 0xe9, 0x89, 0x98,
	0xc8, 0xa1, 0x5e, 0x3c, 0x99, 0x20, 0xd0, 0x88, 0x36, 0xa5, 0x2e, 0x90, 0xd8, 0xd3, 0x06, 0x61,
	0x4d, 0x30, 0xb6, 0xb4, 0x2c, 0xad, 0xf6, 0x13, 0xf9, 0xd5, 0x7c, 0xf9, 0x12, 0xc6, 0xa5, 0xa9,
	0xd0, 0xa4, 0xf1, 0xe0, 0x6d, 0x27, 0xf3, 0x7b, 0x9e, 0x3c, 0x33, 0xb3, 0x70, 0x8f, 0xb3, 0xf2,
	0x90, 0xa7, 0xcc, 0xda, 0x96, 0x45, 0x55, 0xa0, 0xca, 0x0f, 0xa9, 0xc5, 0xbe, 0x26, 0xeb, 0xed,
	0x67, 0x36, 0x79, 0x09, 0xe8, 0x94, 0x2c, 0xa9, 0x98, 0x53, 0xee, 0x3f, 0x56, 0x84, 0xed, 0xf6,
	0x8c, 0x57, 0x68, 0x42, 0x27, 0xfd, 0x53, 0xeb, 0x92, 0x21, 0x99, 0xea, 0x14, 0xad, 0x86, 0xc4,
	0xaa, 0xc9, 0x1a, 0x98, 0x7c, 0x82, 0x41, 0x4b, 0xcf, 0xb7, 0xc5, 0x86, 0x33, 0x7c, 0x01, 0x2a,
	0xaf, 0x92, 0x6a, 0xcf, 0x69, 0x5a, 0x64, 0x4c, 0xd8, 0xdc, 0x4c, 0x1f, 0xb4, 0x6c, 0x42, 0xd1,
	0x77, 0x8a, 0x8c, 0x11, 0xe0, 0xe7, 0x37, 0x8e, 0xa0, 0x2b, 0x9c, 0x69, 0x9e, 0xe9, 0xb2, 0x21,
	0x99, 0x3d, 0xa2, 0x88, 0xda, 0xcf, 0x26, 0xcf, 0x40, 0x23, 0x2c, 0xc9, 0x5a, 0x49, 0x9b, 0xb8,
	0xd4, 0xc6, 0xbf, 0xc0, 0xfd, 0x06, 0xfe, 0xdf, 0xc1, 0xce, 0x3b, 0x91, 0xff, 0xb5, 0x93, 0xd7,
	0xd0, 0x11, 0x35, 0xde, 0x80, 0x7c, 0x8a, 0xd5, 0x21, 0x72, 0x9e, 0x21, 0xc2, 0x9d, 0x4d, 0xb2,
	0x66, 0xa7, 0xb9, 0xc4, 0x1b, 0x1f, 0x42, 0x2f, 0xe7, 0x54, 0x08, 0x8f, 0xfa, 0x6d, 0x43, 0x32,
	0xbb, 0xa4, 0x9b, 0x73, 0xa1, 0x3f, 0x3e, 0xdd, 0x01, 0xfc, 0x4d, 0x83, 0x7d, 0x50, 0xe3, 0x45,
	0xb8, 0xf4, 0x1c, 0x7f, 0xe6, 0x7b, 0xae, 0x76, 0x0b, 0x15, 0x90, 0x83, 0xb7, 0xda, 0x77, 0x05,
	0x75, 0x18, 0xbc, 0xb2, 0x5d, 0x4a, 0xbc, 0x77, 0xb1, 0x17, 0x46, 0x74, 0x69, 0xaf, 0xe6, 0x81,
	0xed, 0x6a, 0x3f, 0x14, 0x1c, 0xc1, 0xd0, 0x21, 0xf1, 0x2c, 0xa2, 0xf6, 0x9c, 0x78, 0xb6, 0xbb,
	0xa2, 0xde, 0x7b, 0x3f, 0x8c, 0x42, 0xed, 0xa7, 0x82, 0x43, 0xe8, 0xd7, 0xad, 0x45, 0x10, 0xd1,
	0x59, 0x10, 0x2f, 0x5c, 0xed, 0x97, 0x32, 0xfd, 0x26, 0x81, 0xe2, 0xd5, 0x53, 0xe1, 0x12, 0xd4,
	0xc6, 0x71, 0xf1, 0xc9, 0xc5, 0xc8, 0x97, 0xdf, 0x66, 0x6c, 0x5c, 0x07, 0x4e, 0xeb, 0x7f, 0x03,
	0xbd, 0xf3, 0x4d, 0xf0, 0x51, 0x0b, 0xbf, 0x3c, 0xed, 0xf8, 0xf1, 0xb5, 0x76, 0xed, 0xf5, 0xe1,
	0xae, 0xf8, 0xce, 0xcf, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x7b, 0xb5, 0x1d, 0x95, 0xdf, 0x02,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ExampleClient is the client API for Example service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExampleClient interface {
	CreateCruft(ctx context.Context, in *CreateCruftRequest, opts ...grpc.CallOption) (*CreateCruftResponse, error)
	ReadCruft(ctx context.Context, in *ReadCruftRequest, opts ...grpc.CallOption) (*ReadCruftResponse, error)
}

type exampleClient struct {
	cc *grpc.ClientConn
}

func NewExampleClient(cc *grpc.ClientConn) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) CreateCruft(ctx context.Context, in *CreateCruftRequest, opts ...grpc.CallOption) (*CreateCruftResponse, error) {
	out := new(CreateCruftResponse)
	err := c.cc.Invoke(ctx, "/svc.example.Example/CreateCruft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleClient) ReadCruft(ctx context.Context, in *ReadCruftRequest, opts ...grpc.CallOption) (*ReadCruftResponse, error) {
	out := new(ReadCruftResponse)
	err := c.cc.Invoke(ctx, "/svc.example.Example/ReadCruft", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleServer is the server API for Example service.
type ExampleServer interface {
	CreateCruft(context.Context, *CreateCruftRequest) (*CreateCruftResponse, error)
	ReadCruft(context.Context, *ReadCruftRequest) (*ReadCruftResponse, error)
}

func RegisterExampleServer(s *grpc.Server, srv ExampleServer) {
	s.RegisterService(&_Example_serviceDesc, srv)
}

func _Example_CreateCruft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCruftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).CreateCruft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svc.example.Example/CreateCruft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).CreateCruft(ctx, req.(*CreateCruftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Example_ReadCruft_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCruftRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).ReadCruft(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/svc.example.Example/ReadCruft",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).ReadCruft(ctx, req.(*ReadCruftRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Example_serviceDesc = grpc.ServiceDesc{
	ServiceName: "svc.example.Example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCruft",
			Handler:    _Example_CreateCruft_Handler,
		},
		{
			MethodName: "ReadCruft",
			Handler:    _Example_ReadCruft_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
