// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"

	"github.com/chrusty/go-grpc-service/pkg/interfaces"
)

type FakeInstrumenter struct {
	CountStub        func()
	countMutex       sync.RWMutex
	countArgsForCall []struct {
	}
	GuageStub        func()
	guageMutex       sync.RWMutex
	guageArgsForCall []struct {
	}
	TimingStub        func()
	timingMutex       sync.RWMutex
	timingArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInstrumenter) Count() {
	fake.countMutex.Lock()
	fake.countArgsForCall = append(fake.countArgsForCall, struct {
	}{})
	fake.recordInvocation("Count", []interface{}{})
	fake.countMutex.Unlock()
	if fake.CountStub != nil {
		fake.CountStub()
	}
}

func (fake *FakeInstrumenter) CountCallCount() int {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	return len(fake.countArgsForCall)
}

func (fake *FakeInstrumenter) CountCalls(stub func()) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = stub
}

func (fake *FakeInstrumenter) Guage() {
	fake.guageMutex.Lock()
	fake.guageArgsForCall = append(fake.guageArgsForCall, struct {
	}{})
	fake.recordInvocation("Guage", []interface{}{})
	fake.guageMutex.Unlock()
	if fake.GuageStub != nil {
		fake.GuageStub()
	}
}

func (fake *FakeInstrumenter) GuageCallCount() int {
	fake.guageMutex.RLock()
	defer fake.guageMutex.RUnlock()
	return len(fake.guageArgsForCall)
}

func (fake *FakeInstrumenter) GuageCalls(stub func()) {
	fake.guageMutex.Lock()
	defer fake.guageMutex.Unlock()
	fake.GuageStub = stub
}

func (fake *FakeInstrumenter) Timing() {
	fake.timingMutex.Lock()
	fake.timingArgsForCall = append(fake.timingArgsForCall, struct {
	}{})
	fake.recordInvocation("Timing", []interface{}{})
	fake.timingMutex.Unlock()
	if fake.TimingStub != nil {
		fake.TimingStub()
	}
}

func (fake *FakeInstrumenter) TimingCallCount() int {
	fake.timingMutex.RLock()
	defer fake.timingMutex.RUnlock()
	return len(fake.timingArgsForCall)
}

func (fake *FakeInstrumenter) TimingCalls(stub func()) {
	fake.timingMutex.Lock()
	defer fake.timingMutex.Unlock()
	fake.TimingStub = stub
}

func (fake *FakeInstrumenter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	fake.guageMutex.RLock()
	defer fake.guageMutex.RUnlock()
	fake.timingMutex.RLock()
	defer fake.timingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInstrumenter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interfaces.Instrumenter = new(FakeInstrumenter)
